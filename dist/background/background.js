"use strict";(()=>{async function c(o,t){try{return(await chrome.storage.sync.get({[o]:t}))[o]}catch(a){return console.error(`Failed to get storage value for key ${o}:`,a),t}}async function i(o,t){try{await chrome.storage.sync.set({[o]:t})}catch(a){console.error(`Failed to set storage value for key ${o}:`,a)}}var e={SLOP_BLOCK_ENABLED:"slopBlockEnabled",DETECTION_COUNT:"detectionCount",USER_WHITELIST:"userWhitelist",BLUR_MODE:"blurMode"},n={[e.SLOP_BLOCK_ENABLED]:!1,[e.DETECTION_COUNT]:0,[e.USER_WHITELIST]:[],[e.BLUR_MODE]:!0};var d={ENABLED:{16:"icons/icon16.png",32:"icons/icon32.png",48:"icons/icon32.png",128:"icons/icon128.png"},DISABLED:{16:"icons/icon16.png",32:"icons/icon32.png",48:"icons/icon32.png",128:"icons/icon128.png"}};chrome.runtime.onInstalled.addListener(async o=>{console.log("Slop Block extension installed/updated:",o.reason),o.reason==="install"&&(await i(e.SLOP_BLOCK_ENABLED,n[e.SLOP_BLOCK_ENABLED]),await i(e.BLUR_MODE,n[e.BLUR_MODE]),await i(e.DETECTION_COUNT,n[e.DETECTION_COUNT]),await i(e.USER_WHITELIST,n[e.USER_WHITELIST]));let t=await c(e.SLOP_BLOCK_ENABLED,n[e.SLOP_BLOCK_ENABLED]);await L(t)});chrome.action.onClicked.addListener(async o=>{try{console.log("Extension icon clicked for tab:",o.id);let a=!await c(e.SLOP_BLOCK_ENABLED,n[e.SLOP_BLOCK_ENABLED]);if(await i(e.SLOP_BLOCK_ENABLED,a),await L(a),o.id&&g(o.url))try{await chrome.tabs.sendMessage(o.id,{action:"toggleSlop",enabled:a}),console.log(`Extension ${a?"enabled":"disabled"} for tab ${o.id}`)}catch(r){console.warn("Failed to send message to content script:",r)}await l(a,o.id)}catch(t){console.error("Error handling action click:",t)}});chrome.runtime.onMessage.addListener(async(o,t,a)=>{var r;try{switch(o.action){case"getState":let s=await c(e.SLOP_BLOCK_ENABLED,n[e.SLOP_BLOCK_ENABLED]),O=await c(e.BLUR_MODE,n[e.BLUR_MODE]);a({enabled:s,blurMode:O});break;case"updateCount":let E=await c(e.DETECTION_COUNT,n[e.DETECTION_COUNT])+(o.count||1);await i(e.DETECTION_COUNT,E),(r=t.tab)!=null&&r.id&&await l(!0,t.tab.id,E);break;default:console.warn("Unknown message action:",o.action)}}catch(s){console.error("Error handling message:",s),a({error:s instanceof Error?s.message:"Unknown error"})}return!0});async function L(o){try{let t=o?d.ENABLED:d.DISABLED;await chrome.action.setIcon({path:t});let a=o?"Slop Block: ON (click to disable)":"Slop Block: OFF (click to enable)";await chrome.action.setTitle({title:a}),console.log(`Icon updated: ${o?"enabled":"disabled"}`)}catch(t){console.error("Failed to update icon:",t)}}async function l(o,t,a){try{if(!o){await chrome.action.setBadgeText({text:"",tabId:t});return}if(a!==void 0&&a>0){let r=a>99?"99+":a.toString();await chrome.action.setBadgeText({text:r,tabId:t}),await chrome.action.setBadgeBackgroundColor({color:"#ff4444",tabId:t})}else await chrome.action.setBadgeText({text:"ON",tabId:t}),await chrome.action.setBadgeBackgroundColor({color:"#00aa00",tabId:t})}catch(r){console.error("Failed to update badge:",r)}}function g(o){return o?o.includes("twitter.com")||o.includes("x.com"):!1}chrome.tabs.onUpdated.addListener(async(o,t,a)=>{if(t.status==="complete"&&g(a.url)){let r=await c(e.SLOP_BLOCK_ENABLED,n[e.SLOP_BLOCK_ENABLED]);await l(r,o)}});console.log("Slop Block background service worker loaded");})();
