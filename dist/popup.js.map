{
  "version": 3,
  "sources": ["../src/utils/storage.ts", "../src/popup/popup.ts"],
  "sourcesContent": ["export async function getStorageValue<T>(key: string, defaultValue: T): Promise<T> {\r\n  try {\r\n    const result = await chrome.storage.sync.get({ [key]: defaultValue });\r\n    return result[key];\r\n  } catch (error) {\r\n    console.error(`Failed to get storage value for key ${key}:`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\nexport async function setStorageValue<T>(key: string, value: T): Promise<void> {\r\n  try {\r\n    await chrome.storage.sync.set({ [key]: value });\r\n  } catch (error) {\r\n    console.error(`Failed to set storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport async function removeStorageValue(key: string): Promise<void> {\r\n  try {\r\n    await chrome.storage.sync.remove(key);\r\n  } catch (error) {\r\n    console.error(`Failed to remove storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport async function getLocalStorageValue<T>(key: string, defaultValue: T): Promise<T> {\r\n  try {\r\n    const result = await chrome.storage.local.get({ [key]: defaultValue });\r\n    return result[key];\r\n  } catch (error) {\r\n    console.error(`Failed to get local storage value for key ${key}:`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\nexport async function setLocalStorageValue<T>(key: string, value: T): Promise<void> {\r\n  try {\r\n    await chrome.storage.local.set({ [key]: value });\r\n  } catch (error) {\r\n    if (error instanceof Error && error.message.includes('Extension context invalidated')) {\r\n      console.warn(`Extension context invalidated - skipping storage save for ${key}`);\r\n      return;\r\n    }\r\n    console.error(`Failed to set local storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport const STORAGE_KEYS = {\r\n  SLOP_BLOCK_ENABLED: 'slopBlockEnabled',\r\n  DETECTION_COUNT: 'detectionCount',\r\n  USER_WHITELIST: 'userWhitelist',\r\n  BLUR_MODE: 'blurMode',\r\n  OPENROUTER_API_KEY: 'openRouterApiKey',\r\n  AI_DETECTION_ENABLED: 'aiDetectionEnabled',\r\n  USE_GROQ: 'useGroq',\r\n  SYSTEM_PROMPT: 'systemPrompt',\r\n  BATCH_SIZE: 'batchSize',\r\n  CUSTOM_PROMPT: 'customPrompt',\r\n  PROCESSED_TWEET_IDS: 'processedTweetIds',\r\n  LLM_ANALYZED_IDS: 'llmAnalyzedIds',\r\n} as const;\r\n\r\nexport const DEFAULT_VALUES = {\r\n  [STORAGE_KEYS.SLOP_BLOCK_ENABLED]: false,\r\n  [STORAGE_KEYS.DETECTION_COUNT]: 0,\r\n  [STORAGE_KEYS.USER_WHITELIST]: [] as string[],\r\n  [STORAGE_KEYS.BLUR_MODE]: true,\r\n  [STORAGE_KEYS.OPENROUTER_API_KEY]: '',\r\n  [STORAGE_KEYS.AI_DETECTION_ENABLED]: false,\r\n  [STORAGE_KEYS.USE_GROQ]: true,\r\n  [STORAGE_KEYS.SYSTEM_PROMPT]: 'You are an expert at detecting AI-generated motivational slop, engagement bait, and generic inspirational content on social media. Analyze each tweet and classify it as slop or genuine content.\\n\\nSLOP INDICATORS:\\n\u2022 Motivational clich\u00E9s: \"mindset is everything\", \"follow your dreams\", \"hustle harder\", \"grind never stops\"\\n\u2022 Business/money schemes: \"$10k/month\", \"passive income\", \"quit my job\", \"financial freedom\"\\n\u2022 Generic advice patterns: \"here\\'s what I learned\", \"X things nobody tells you\", \"stop doing this, start doing this\"\\n\u2022 Engagement bait: \"unpopular opinion\", \"let that sink in\", \"read that again\", \"thread \uD83E\uDDF5\"\\n\u2022 AI-like structure: numbered lists, formulaic advice, excessive emojis\\n\u2022 Buzzwords: entrepreneur, transformation, breakthrough, optimize, unlock potential\\n\u2022 Sales pitches: \"DM me\", \"link in bio\", \"limited time\", \"exclusive access\"\\n\\nReturn JSON format: {\"results\": [{\"id\": 0, \"isSlop\": true/false, \"confidence\": 0.0-1.0}]} where id matches tweet position (0-14).',\r\n  [STORAGE_KEYS.BATCH_SIZE]: 10,\r\n  [STORAGE_KEYS.CUSTOM_PROMPT]: '',\r\n  [STORAGE_KEYS.PROCESSED_TWEET_IDS]: [] as string[],\r\n  [STORAGE_KEYS.LLM_ANALYZED_IDS]: [] as string[],\r\n} as const;\r\n\r\n\r\nexport interface TweetMetadata {\r\n  id: string;\r\n  text: string;\r\n  username: string;\r\n  engagement: {\r\n    likes: number;\r\n    retweets: number;\r\n    replies: number;\r\n  };\r\n  element: HTMLElement;\r\n  timestamp: number;\r\n} \r\n", "import { getStorageValue, setStorageValue, STORAGE_KEYS, DEFAULT_VALUES } from '../utils/storage';\r\n\r\ninterface UIElements {\r\n  statusText: HTMLElement;\r\n  toggleButton: HTMLElement;\r\n  settingsButton: HTMLElement;\r\n  mainView: HTMLElement;\r\n  settingsView: HTMLElement;\r\n  backButton: HTMLElement;\r\n  apiKeyInput: HTMLInputElement;\r\n  saveApiKeyButton: HTMLElement;\r\n  customPromptInput: HTMLTextAreaElement;\r\n  savePromptButton: HTMLElement;\r\n  llmCountBadge: HTMLElement;\r\n}\r\n\r\nlet elements: UIElements;\r\nlet savedApiKey = '';\r\n\r\nfunction getUIElements(): UIElements {\r\n  return {\r\n    statusText: document.getElementById('statusText')!,\r\n    toggleButton: document.getElementById('toggleSwitch')!,\r\n    settingsButton: document.getElementById('settingsButton')!,\r\n    mainView: document.getElementById('mainView')!,\r\n    settingsView: document.getElementById('settingsView')!,\r\n    backButton: document.getElementById('backButton')!,\r\n    apiKeyInput: document.getElementById('apiKeyInput') as HTMLInputElement,\r\n    saveApiKeyButton: document.getElementById('submitApiKey')!,\r\n    customPromptInput: document.getElementById('customPromptInput') as HTMLTextAreaElement,\r\n    savePromptButton: document.getElementById('savePrompt')!,\r\n    llmCountBadge: document.getElementById('llmCountBadge')!\r\n  };\r\n}\r\n\r\nfunction maskKey(key: string): string {\r\n  if (!key) return '';\r\n  const visible = key.slice(0, 6);\r\n  const hidden = '*'.repeat(Math.max(0, key.length - visible.length));\r\n  return visible + hidden;\r\n}\r\n\r\nasync function updateToggleButton(enabled: boolean): Promise<void> {\r\n  const toggleInput = elements.toggleButton as HTMLInputElement;\r\n  toggleInput.checked = enabled;\r\n  elements.statusText.textContent = enabled ? 'Enabled' : 'Disabled';\r\n  \r\n  if (!enabled) {\r\n    elements.llmCountBadge.style.display = 'none';\r\n  }\r\n  \r\n  try {\r\n    await setStorageValue(STORAGE_KEYS.SLOP_BLOCK_ENABLED, enabled);\r\n    \r\n    chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {\r\n      if (tabs[0]?.id) {\r\n        chrome.tabs.sendMessage(tabs[0].id, {\r\n          action: 'stateChanged',\r\n          enabled: enabled\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating toggle state:', error);\r\n  }\r\n}\r\n\r\nfunction showMainView(): void {\r\n  elements.mainView.style.display = 'flex';\r\n  elements.settingsView.style.display = 'none';\r\n  elements.mainView.style.removeProperty('width');\r\n}\r\n\r\nfunction showSettingsView(): void {\r\n  elements.mainView.style.display = 'none';\r\n  elements.settingsView.style.display = 'block';\r\n  elements.settingsView.style.removeProperty('width');\r\n}\r\n\r\nasync function saveApiKey(): Promise<void> {\r\n  const apiKey = elements.apiKeyInput.value.trim();\r\n  if (apiKey) {\r\n    await setStorageValue(STORAGE_KEYS.OPENROUTER_API_KEY, apiKey);\r\n    savedApiKey = apiKey;\r\n    elements.apiKeyInput.value = maskKey(apiKey);\r\n    elements.saveApiKeyButton.textContent = 'Saved!';\r\n    setTimeout(() => {\r\n      elements.saveApiKeyButton.textContent = 'Submit API Key';\r\n    }, 2000);\r\n    updateApiKeyButtonState();\r\n  }\r\n}\r\n\r\nasync function saveCustomPrompt(): Promise<void> {\r\n  const customPrompt = elements.customPromptInput.value.trim();\r\n  if (customPrompt) {\r\n    await setStorageValue(STORAGE_KEYS.SYSTEM_PROMPT, customPrompt);\r\n    elements.savePromptButton.textContent = 'Saved!';\r\n    setTimeout(() => {\r\n      elements.savePromptButton.textContent = 'Save Prompt';\r\n    }, 2000);\r\n  }\r\n}\r\n\r\nasync function loadSettings(): Promise<void> {\r\n  const apiKey = await getStorageValue(STORAGE_KEYS.OPENROUTER_API_KEY, '');\r\n  savedApiKey = apiKey;\r\n  \r\n  elements.apiKeyInput.value = maskKey(apiKey);\r\n  elements.customPromptInput.value = await getStorageValue(STORAGE_KEYS.SYSTEM_PROMPT, '');\r\n\r\n\r\n\r\n  const count = await getStorageValue(\r\n    STORAGE_KEYS.DETECTION_COUNT,\r\n    DEFAULT_VALUES[STORAGE_KEYS.DETECTION_COUNT]\r\n  );\r\n  updateBadge(count);\r\n  updateApiKeyButtonState();\r\n}\r\n\r\nfunction updateBadge(count: number): void {\r\n  if (count > 0) {\r\n    elements.llmCountBadge.textContent = String(count);\r\n    elements.llmCountBadge.style.display = 'inline-block';\r\n  } else {\r\n    elements.llmCountBadge.style.display = 'none';\r\n  }\r\n}\r\n\r\nfunction updateApiKeyButtonState(): void {\r\n  const current = elements.apiKeyInput.value.trim();\r\n  const isUnchanged = current === maskKey(savedApiKey) || current === savedApiKey;\r\n  elements.saveApiKeyButton.toggleAttribute('disabled', isUnchanged);\r\n}\r\n\r\nasync function initializePopup(): Promise<void> {\r\n  elements = getUIElements();\r\n  \r\n  const enabled = await getStorageValue(STORAGE_KEYS.SLOP_BLOCK_ENABLED, DEFAULT_VALUES[STORAGE_KEYS.SLOP_BLOCK_ENABLED]);\r\n  \r\n  await loadSettings();\r\n  \r\n  const toggleInput = elements.toggleButton as HTMLInputElement;\r\n  toggleInput.checked = enabled;\r\n  elements.statusText.textContent = enabled ? 'Enabled' : 'Disabled';\r\n\r\n  elements.toggleButton.addEventListener('change', async () => {\r\n    const toggleInput = elements.toggleButton as HTMLInputElement;\r\n    const newEnabled = toggleInput.checked;\r\n    await updateToggleButton(newEnabled);\r\n  });\r\n\r\n  elements.settingsButton.addEventListener('click', () => {\r\n    showSettingsView();\r\n  });\r\n\r\n  elements.backButton.addEventListener('click', () => {\r\n    showMainView();\r\n  });\r\n\r\n  elements.saveApiKeyButton.addEventListener('click', saveApiKey);\r\n  elements.savePromptButton.addEventListener('click', saveCustomPrompt);\r\n\r\n  elements.apiKeyInput.addEventListener('input', updateApiKeyButtonState);\r\n\r\n\r\n\r\n\r\n  chrome.storage.onChanged.addListener((changes) => {\r\n    if (changes[STORAGE_KEYS.DETECTION_COUNT]) {\r\n      updateBadge(changes[STORAGE_KEYS.DETECTION_COUNT].newValue);\r\n    }\r\n  });\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', initializePopup); "],
  "mappings": "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",
  "names": ["toggleInput"]
}
