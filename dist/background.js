"use strict";(()=>{async function c(e,t){try{return(await chrome.storage.sync.get({[e]:t}))[e]}catch(r){return console.error(`Failed to get storage value for key ${e}:`,r),t}}async function i(e,t){try{await chrome.storage.sync.set({[e]:t})}catch(r){console.error(`Failed to set storage value for key ${e}:`,r)}}var o={SLOP_BLOCK_ENABLED:"slopBlockEnabled",DETECTION_COUNT:"detectionCount",USER_WHITELIST:"userWhitelist",BLUR_MODE:"blurMode"},a={[o.SLOP_BLOCK_ENABLED]:!1,[o.DETECTION_COUNT]:0,[o.USER_WHITELIST]:[],[o.BLUR_MODE]:!0};chrome.runtime.onInstalled.addListener(async e=>{console.log("Slop Block extension installed/updated:",e.reason),e.reason==="install"&&(await i(o.SLOP_BLOCK_ENABLED,a[o.SLOP_BLOCK_ENABLED]),await i(o.BLUR_MODE,a[o.BLUR_MODE]),await i(o.DETECTION_COUNT,a[o.DETECTION_COUNT]),await i(o.USER_WHITELIST,a[o.USER_WHITELIST]));let t=await c(o.SLOP_BLOCK_ENABLED,a[o.SLOP_BLOCK_ENABLED]);await u(t)});chrome.runtime.onMessage.addListener(async(e,t,r)=>{var n;try{switch(e.action){case"getState":let s=await c(o.SLOP_BLOCK_ENABLED,a[o.SLOP_BLOCK_ENABLED]),L=await c(o.BLUR_MODE,a[o.BLUR_MODE]);r({enabled:s,blurMode:L});break;case"stateChanged":await u(e.enabled),chrome.tabs.query({active:!0,currentWindow:!0},E=>{var d;(d=E[0])!=null&&d.id&&chrome.tabs.sendMessage(E[0].id,{action:"toggleSlop",enabled:e.enabled})}),r({success:!0});break;case"updateCount":let l=await c(o.DETECTION_COUNT,a[o.DETECTION_COUNT])+(e.count||1);await i(o.DETECTION_COUNT,l),(n=t.tab)!=null&&n.id&&await g(!0,t.tab.id,l),r({success:!0});break;default:console.warn("Unknown message action:",e.action),r({error:"Unknown action"})}}catch(s){console.error("Error handling message:",s),r({error:s instanceof Error?s.message:"Unknown error"})}return!0});async function u(e){try{let t=e?"Slop Block: ON (click to disable)":"Slop Block: OFF (click to enable)";await chrome.action.setTitle({title:t}),console.log(`Icon updated: ${e?"enabled":"disabled"}`)}catch(t){console.error("Failed to update icon:",t)}}async function g(e,t,r){try{if(!e){await chrome.action.setBadgeText({text:"",tabId:t});return}if(r!==void 0&&r>0){let n=r>99?"99+":r.toString();await chrome.action.setBadgeText({text:n,tabId:t}),await chrome.action.setBadgeBackgroundColor({color:"#ff4444",tabId:t})}else await chrome.action.setBadgeText({text:"ON",tabId:t}),await chrome.action.setBadgeBackgroundColor({color:"#00aa00",tabId:t})}catch(n){console.error("Failed to update badge:",n)}}function O(e){return e?e.includes("twitter.com")||e.includes("x.com"):!1}chrome.tabs.onUpdated.addListener(async(e,t,r)=>{if(t.status==="complete"&&O(r.url)){let n=await c(o.SLOP_BLOCK_ENABLED,a[o.SLOP_BLOCK_ENABLED]);await g(n,e)}});console.log("Slop Block background service worker loaded");})();
