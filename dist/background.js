"use strict";(()=>{async function s(o,e){try{return(await chrome.storage.sync.get({[o]:e}))[o]}catch(a){return console.error(`Failed to get storage value for key ${o}:`,a),e}}async function i(o,e){try{await chrome.storage.sync.set({[o]:e})}catch(a){console.error(`Failed to set storage value for key ${o}:`,a)}}var t={SLOP_BLOCK_ENABLED:"slopBlockEnabled",DETECTION_COUNT:"detectionCount",USER_WHITELIST:"userWhitelist",BLUR_MODE:"blurMode"},c={[t.SLOP_BLOCK_ENABLED]:!1,[t.DETECTION_COUNT]:0,[t.USER_WHITELIST]:[],[t.BLUR_MODE]:!0};chrome.runtime.onInstalled.addListener(async o=>{console.log("Slop Block extension installed/updated:",o.reason),o.reason==="install"&&(await i(t.SLOP_BLOCK_ENABLED,c[t.SLOP_BLOCK_ENABLED]),await i(t.BLUR_MODE,c[t.BLUR_MODE]),await i(t.DETECTION_COUNT,c[t.DETECTION_COUNT]),await i(t.USER_WHITELIST,c[t.USER_WHITELIST]));let e=await s(t.SLOP_BLOCK_ENABLED,c[t.SLOP_BLOCK_ENABLED]);await g(e)});chrome.runtime.onMessage.addListener(async(o,e,a)=>{var r;console.log("\u{1F4E8} Background received message:",o);try{switch(o.action){case"stateChanged":console.log("\u{1F504} Processing state change:",o.enabled),await g(o.enabled),console.log("\u2705 Icon updated for state change"),a({success:!0});break;case"updateCount":console.log("\u{1F4CA} Processing count update:",o.count);let n=await s(t.DETECTION_COUNT,c[t.DETECTION_COUNT]),l=n+(o.count||1);await i(t.DETECTION_COUNT,l),console.log("\u{1F4C8} Count updated:",n,"\u2192",l),(r=e.tab)!=null&&r.id&&(console.log("\u{1F3F7}\uFE0F Updating badge for tab:",e.tab.id),await d(!0,e.tab.id,l)),a({success:!0});break;default:console.warn("\u26A0\uFE0F Unknown message action:",o.action),a({error:"Unknown action"})}}catch(n){console.error("\u274C Error handling message:",n),a({error:n instanceof Error?n.message:"Unknown error"})}return!0});async function g(o){try{console.log("\u{1F3AF} Updating icon for enabled state:",o);let e=o?"Slop Block: ON (click to disable)":"Slop Block: OFF (click to enable)";await chrome.action.setTitle({title:e}),console.log("\u{1F4DD} Title updated:",e);let r=(await chrome.tabs.query({})).filter(n=>u(n.url));console.log("\u{1F426} Found Twitter tabs:",r.length);for(let n of r)n.id&&(console.log("\u{1F3F7}\uFE0F Updating badge for Twitter tab:",n.id,n.url),await d(o,n.id));console.log(`\u2705 Icon updated: ${o?"enabled":"disabled"}`)}catch(e){console.error("\u274C Failed to update icon:",e)}}async function d(o,e,a){try{if(console.log("\u{1F3F7}\uFE0F Updating badge:",{enabled:o,tabId:e,count:a}),!o){console.log("\u{1F6AB} Extension disabled - clearing badge"),await chrome.action.setBadgeText({text:"",tabId:e});return}if(a!==void 0&&a>0){let r=a>99?"99+":a.toString();console.log("\u{1F522} Setting count badge:",r),await chrome.action.setBadgeText({text:r,tabId:e}),await chrome.action.setBadgeBackgroundColor({color:"#ff4444",tabId:e})}else console.log("\u2705 Setting ON badge"),await chrome.action.setBadgeText({text:"ON",tabId:e}),await chrome.action.setBadgeBackgroundColor({color:"#00aa00",tabId:e});console.log("\u2705 Badge update completed")}catch(r){console.error("\u274C Failed to update badge:",r)}}function u(o){return o?o.includes("twitter.com")||o.includes("x.com"):!1}chrome.tabs.onUpdated.addListener(async(o,e,a)=>{if(e.status==="complete"&&u(a.url)){let r=await s(t.SLOP_BLOCK_ENABLED,c[t.SLOP_BLOCK_ENABLED]);await d(r,o)}});console.log("Slop Block background service worker loaded");})();
