{
  "version": 3,
  "sources": ["../src/utils/storage.ts", "../src/utils/dom.ts", "../src/utils/openrouter.ts", "../src/content/content.ts"],
  "sourcesContent": ["export async function getStorageValue<T>(key: string, defaultValue: T): Promise<T> {\r\n  try {\r\n    const result = await chrome.storage.sync.get({ [key]: defaultValue });\r\n    return result[key];\r\n  } catch (error) {\r\n    console.error(`Failed to get storage value for key ${key}:`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\nexport async function setStorageValue<T>(key: string, value: T): Promise<void> {\r\n  try {\r\n    await chrome.storage.sync.set({ [key]: value });\r\n  } catch (error) {\r\n    console.error(`Failed to set storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport async function removeStorageValue(key: string): Promise<void> {\r\n  try {\r\n    await chrome.storage.sync.remove(key);\r\n  } catch (error) {\r\n    console.error(`Failed to remove storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport async function getLocalStorageValue<T>(key: string, defaultValue: T): Promise<T> {\r\n  try {\r\n    const result = await chrome.storage.local.get({ [key]: defaultValue });\r\n    return result[key];\r\n  } catch (error) {\r\n    console.error(`Failed to get local storage value for key ${key}:`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\nexport async function setLocalStorageValue<T>(key: string, value: T): Promise<void> {\r\n  try {\r\n    await chrome.storage.local.set({ [key]: value });\r\n  } catch (error) {\r\n    if (error instanceof Error && error.message.includes('Extension context invalidated')) {\r\n      console.warn(`Extension context invalidated - skipping storage save for ${key}`);\r\n      return;\r\n    }\r\n    console.error(`Failed to set local storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport const STORAGE_KEYS = {\r\n  SLOP_BLOCK_ENABLED: 'slopBlockEnabled',\r\n  DETECTION_COUNT: 'detectionCount',\r\n  USER_WHITELIST: 'userWhitelist',\r\n  BLUR_MODE: 'blurMode',\r\n  OPENROUTER_API_KEY: 'openRouterApiKey',\r\n  AI_DETECTION_ENABLED: 'aiDetectionEnabled',\r\n  USE_GROQ: 'useGroq',\r\n  SYSTEM_PROMPT: 'systemPrompt',\r\n  BATCH_SIZE: 'batchSize',\r\n  CUSTOM_PROMPT: 'customPrompt',\r\n  PROCESSED_TWEET_IDS: 'processedTweetIds',\r\n  LLM_ANALYZED_IDS: 'llmAnalyzedIds',\r\n} as const;\r\n\r\nexport const DEFAULT_VALUES = {\r\n  [STORAGE_KEYS.SLOP_BLOCK_ENABLED]: false,\r\n  [STORAGE_KEYS.DETECTION_COUNT]: 0,\r\n  [STORAGE_KEYS.USER_WHITELIST]: [] as string[],\r\n  [STORAGE_KEYS.BLUR_MODE]: true,\r\n  [STORAGE_KEYS.OPENROUTER_API_KEY]: '',\r\n  [STORAGE_KEYS.AI_DETECTION_ENABLED]: false,\r\n  [STORAGE_KEYS.USE_GROQ]: true,\r\n  [STORAGE_KEYS.SYSTEM_PROMPT]: 'You are an expert at detecting AI-generated motivational slop, engagement bait, and generic inspirational content on social media. Analyze each tweet and classify it as slop or genuine content.\\n\\nSLOP INDICATORS:\\n\u2022 Motivational clich\u00E9s: \"mindset is everything\", \"follow your dreams\", \"hustle harder\", \"grind never stops\"\\n\u2022 Business/money schemes: \"$10k/month\", \"passive income\", \"quit my job\", \"financial freedom\"\\n\u2022 Generic advice patterns: \"here\\'s what I learned\", \"X things nobody tells you\", \"stop doing this, start doing this\"\\n\u2022 Engagement bait: \"unpopular opinion\", \"let that sink in\", \"read that again\", \"thread \uD83E\uDDF5\"\\n\u2022 AI-like structure: numbered lists, formulaic advice, excessive emojis\\n\u2022 Buzzwords: entrepreneur, transformation, breakthrough, optimize, unlock potential\\n\u2022 Sales pitches: \"DM me\", \"link in bio\", \"limited time\", \"exclusive access\"\\n\\nReturn JSON format: {\"results\": [{\"id\": 0, \"isSlop\": true/false, \"confidence\": 0.0-1.0}]} where id matches tweet position (0-14).',\r\n  [STORAGE_KEYS.BATCH_SIZE]: 10,\r\n  [STORAGE_KEYS.CUSTOM_PROMPT]: '',\r\n  [STORAGE_KEYS.PROCESSED_TWEET_IDS]: [] as string[],\r\n  [STORAGE_KEYS.LLM_ANALYZED_IDS]: [] as string[],\r\n} as const;\r\n\r\n\r\nexport interface TweetMetadata {\r\n  id: string;\r\n  text: string;\r\n  username: string;\r\n  engagement: {\r\n    likes: number;\r\n    retweets: number;\r\n    replies: number;\r\n  };\r\n  element: HTMLElement;\r\n  timestamp: number;\r\n} \r\n", "\r\n\r\nimport { TweetMetadata } from './storage';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    DEBUG_SLOP_DETECTION?: boolean;\r\n  }\r\n}\r\n\r\nlet processingQueue: Element[] = [];\r\nlet isProcessing = false;\r\n\r\nconst DEBUG = window.DEBUG_SLOP_DETECTION || false;\r\n\r\nfunction debugLog(...args: any[]): void {\r\n  if (DEBUG) {\r\n    console.log('[SlopBlock DOM]', ...args);\r\n  }\r\n}\r\n\r\ninterface ProcessingStats {\r\n  totalTweets: number;\r\n  textExtracted: number;\r\n  slopDetected: number;\r\n}\r\n\r\nconst stats: ProcessingStats = {\r\n  totalTweets: 0,\r\n  textExtracted: 0,\r\n  slopDetected: 0\r\n};\r\n\r\nfunction getTweetElements(): Element[] {\r\n  return Array.from(document.querySelectorAll('[data-testid=\"tweet\"]')).filter(tweet => {\r\n    const parent = tweet.closest('article');\r\n    return parent && !parent.hasAttribute('data-slop-processed');\r\n  });\r\n}\r\n\r\nfunction extractTweetId(element: HTMLElement): string | null {\r\n  const links = element.querySelectorAll('a[href*=\"/status/\"]');\r\n  for (const link of Array.from(links)) {\r\n    const href = (link as HTMLAnchorElement).href;\r\n    const match = href.match(/\\/status\\/(\\d+)/);\r\n    if (match && match[1]) return match[1];\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction fallbackHash(content: string): string {\r\n  let hash = 0;\r\n  for (let i = 0; i < content.length; i++) {\r\n    hash = ((hash << 5) - hash) + content.charCodeAt(i);\r\n    hash |= 0;\r\n  }\r\n  return 'h' + Math.abs(hash);\r\n}\r\n\r\nfunction extractTweetData(element: Element): TweetMetadata | null {\r\n  try {\r\n    const id = extractTweetId(element as HTMLElement);\r\n\r\n    const tweetText = extractTweetTextRobust(element);\r\n    if (!tweetText) {\r\n      debugLog('No text extracted for tweet:', element);\r\n      return null;\r\n    }\r\n\r\n    stats.textExtracted++;\r\n\r\n    const userElement = element.querySelector('[data-testid=\"User-Name\"]');\r\n    const username = userElement?.textContent?.trim() || 'unknown';\r\n\r\n    const engagementElements = {\r\n      replies: element.querySelector('[data-testid=\"reply\"]'),\r\n      retweets: element.querySelector('[data-testid=\"retweet\"]'),\r\n      likes: element.querySelector('[data-testid=\"like\"]')\r\n    };\r\n\r\n    const engagement = {\r\n      replies: parseEngagementCount(engagementElements.replies?.textContent || '0'),\r\n      retweets: parseEngagementCount(engagementElements.retweets?.textContent || '0'),\r\n      likes: parseEngagementCount(engagementElements.likes?.textContent || '0')\r\n    };\r\n\r\n    const metadata: TweetMetadata = {\r\n      id: id || fallbackHash(tweetText),\r\n      text: tweetText,\r\n      username,\r\n      engagement,\r\n      element: element as HTMLElement,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    debugLog('Extracted tweet data:', {\r\n      username,\r\n      textLength: tweetText.length,\r\n      engagement,\r\n      textPreview: tweetText.substring(0, 100) + '...'\r\n    });\r\n\r\n    return metadata;\r\n  } catch (error) {\r\n    console.error('Error extracting tweet data:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction extractTweetTextRobust(element: Element): string {\r\n  let extractedText = '';\r\n\r\n  const primarySelector = '[data-testid=\"tweetText\"]';\r\n  const primaryElement = element.querySelector(primarySelector);\r\n  \r\n  if (primaryElement?.textContent?.trim()) {\r\n    extractedText = primaryElement.textContent.trim();\r\n    debugLog('Strategy 1 success:', extractedText.substring(0, 50));\r\n    return extractedText;\r\n  }\r\n\r\n  const alternativeSelectors = [\r\n    '[lang] span',\r\n    '.css-901oao span',\r\n    '[dir=\"auto\"] span'\r\n  ];\r\n\r\n  for (const selector of alternativeSelectors) {\r\n    const elements = element.querySelectorAll(selector);\r\n    const texts = Array.from(elements)\r\n      .map(el => el.textContent?.trim())\r\n      .filter(text => text && text.length > 0);\r\n    \r\n    if (texts.length > 0) {\r\n      extractedText = texts.join(' ').trim();\r\n      if (extractedText.length > 10) {\r\n        debugLog('Strategy 2 success:', extractedText.substring(0, 50));\r\n        return extractedText;\r\n      }\r\n    }\r\n  }\r\n\r\n  const langElements = element.querySelectorAll('[lang]:not([lang=\"\"])');\r\n  for (const langEl of Array.from(langElements)) {\r\n    const text = langEl.textContent?.trim();\r\n    if (text && text.length > extractedText.length) {\r\n      extractedText = text;\r\n    }\r\n  }\r\n  \r\n  if (extractedText.trim().length > 10) {\r\n    debugLog('Strategy 3 success:', extractedText.substring(0, 50));\r\n    return extractedText.trim();\r\n  }\r\n\r\n  const tweetContainer = element.querySelector('[data-testid=\"tweet\"]') || element;\r\n  const textNodes = getTextNodesFromElement(tweetContainer);\r\n  const meaningfulTexts = textNodes\r\n    .map(node => node.textContent?.trim())\r\n    .filter(text => text && text.length > 3)\r\n    .filter(text => !isNavigationText(text));\r\n\r\n  if (meaningfulTexts.length > 0) {\r\n    extractedText = meaningfulTexts.join(' ').trim();\r\n    debugLog('Strategy 4 success:', extractedText.substring(0, 50));\r\n    return extractedText;\r\n  }\r\n\r\n  debugLog('All strategies failed for element:', element);\r\n  return '';\r\n}\r\n\r\nfunction getTextNodesFromElement(element: Element): Text[] {\r\n  const textNodes: Text[] = [];\r\n  const walker = document.createTreeWalker(\r\n    element,\r\n    NodeFilter.SHOW_TEXT,\r\n    {\r\n      acceptNode: (node) => {\r\n        const parent = node.parentElement;\r\n        if (!parent) return NodeFilter.FILTER_REJECT;\r\n        \r\n        const tagName = parent.tagName.toLowerCase();\r\n        if (['script', 'style', 'svg'].includes(tagName)) {\r\n          return NodeFilter.FILTER_REJECT;\r\n        }\r\n        \r\n        const text = node.textContent?.trim();\r\n        if (!text || text.length < 3) {\r\n          return NodeFilter.FILTER_REJECT;\r\n        }\r\n        \r\n        return NodeFilter.FILTER_ACCEPT;\r\n      }\r\n    }\r\n  );\r\n\r\n  let node;\r\n  while (node = walker.nextNode()) {\r\n    textNodes.push(node as Text);\r\n  }\r\n  \r\n  return textNodes;\r\n}\r\n\r\nfunction isNavigationText(text: string): boolean {\r\n  const navPatterns = [\r\n    /^\\d+[hms]$/, /^\u00B7$/, /^@/, /^Show this thread$/,\r\n    /^Replying to/, /^Quote Tweet$/, /^Retweet$/,\r\n    /^\\d+$/, /^Show replies$/, /^More$/\r\n  ];\r\n  \r\n  return navPatterns.some(pattern => pattern.test(text.trim()));\r\n}\r\n\r\nfunction parseEngagementCount(text: string): number {\r\n  if (!text) return 0;\r\n  \r\n  const cleanText = text.replace(/[^\\d.KMkm]/g, '');\r\n  const number = parseFloat(cleanText);\r\n  \r\n  if (isNaN(number)) return 0;\r\n  \r\n  if (cleanText.toLowerCase().includes('k')) {\r\n    return Math.round(number * 1000);\r\n  } else if (cleanText.toLowerCase().includes('m')) {\r\n    return Math.round(number * 1000000);\r\n  }\r\n  \r\n  return Math.round(number);\r\n}\r\n\r\nfunction collapseToStub(element: HTMLElement): void {\r\n  if (element.hasAttribute('data-slop-collapsed')) {\r\n    return;\r\n  }\r\n\r\n  const existingHeaders = element.querySelectorAll('.slop-collapse-header');\r\n  existingHeaders.forEach(header => header.remove());\r\n\r\n  const originalContent = element.innerHTML;\r\n  element.setAttribute('data-original-content', originalContent);\r\n\r\n  const stubContainer = document.createElement('div');\r\n  stubContainer.className = 'slop-collapsed';\r\n  stubContainer.innerHTML = `\r\n    <div class=\"slop-collapsed-header\">\r\n      <span class=\"slop-collapsed-text\">AI-generated content hidden</span>\r\n      <span class=\"slop-expand-icon\">\u25BC</span>\r\n    </div>\r\n  `;\r\n\r\n  stubContainer.addEventListener('mouseenter', () => {\r\n    stubContainer.style.backgroundColor = 'rgb(239, 243, 244)';\r\n  });\r\n\r\n  stubContainer.addEventListener('mouseleave', () => {\r\n    stubContainer.style.backgroundColor = 'rgb(247, 249, 250)';\r\n  });\r\n\r\n  stubContainer.addEventListener('click', () => {\r\n    expandFromStub(element);\r\n  });\r\n\r\n  element.innerHTML = '';\r\n  element.appendChild(stubContainer);\r\n  element.setAttribute('data-slop-collapsed', 'true');\r\n  element.style.display = 'block';\r\n}\r\n\r\nfunction collapseAITweet(element: HTMLElement): void {\r\n  if (element.hasAttribute('data-ai-collapsed')) {\r\n    return;\r\n  }\r\n\r\n  const existingBars = element.querySelectorAll('.ai-tweet-bar');\r\n  existingBars.forEach(bar => bar.remove());\r\n\r\n  const originalContent = element.innerHTML;\r\n  element.setAttribute('data-ai-original-content', originalContent);\r\n\r\n  const aiBar = document.createElement('div');\r\n  aiBar.className = 'ai-tweet-bar';\r\n  aiBar.style.cssText = `\r\n    background: white;\r\n    border: 1px solid #e1e8ed;\r\n    border-radius: 8px;\r\n    padding: 8px 12px;\r\n    margin: 4px 0;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease;\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    min-height: 20px;\r\n  `;\r\n\r\n  aiBar.innerHTML = `\r\n    <span style=\"color: #657786; font-size: 13px; font-weight: 400;\">ai tweet hidden</span>\r\n    <span style=\"color: #657786; font-size: 12px;\">\u25BC</span>\r\n  `;\r\n\r\n  aiBar.addEventListener('mouseenter', () => {\r\n    aiBar.style.backgroundColor = '#f7f9fa';\r\n  });\r\n\r\n  aiBar.addEventListener('mouseleave', () => {\r\n    aiBar.style.backgroundColor = 'white';\r\n  });\r\n\r\n  aiBar.addEventListener('click', (e) => {\r\n    e.stopPropagation();\r\n    expandAITweet(element);\r\n  });\r\n\r\n  element.innerHTML = '';\r\n  element.appendChild(aiBar);\r\n  element.setAttribute('data-ai-collapsed', 'true');\r\n  element.style.display = 'block';\r\n}\r\n\r\nfunction expandAITweet(element: HTMLElement): void {\r\n  if (!element.hasAttribute('data-ai-collapsed')) {\r\n    return;\r\n  }\r\n\r\n  const originalContent = element.getAttribute('data-ai-original-content');\r\n  if (originalContent) {\r\n    element.innerHTML = originalContent;\r\n  }\r\n\r\n  const existingHeaders = element.querySelectorAll('.ai-hide-header');\r\n  existingHeaders.forEach(header => header.remove());\r\n\r\n  const hideHeader = document.createElement('div');\r\n  hideHeader.className = 'ai-hide-header';\r\n  hideHeader.style.cssText = `\r\n    background: white;\r\n    border: 1px solid #e1e8ed;\r\n    border-radius: 8px;\r\n    padding: 6px 10px;\r\n    margin-bottom: 8px;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease;\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  `;\r\n\r\n  hideHeader.innerHTML = `\r\n    <span style=\"color: #657786; font-size: 13px; font-weight: 400;\">\uD83E\uDD16 hide ai tweet</span>\r\n    <span style=\"color: #657786; font-size: 12px;\">\u25B2</span>\r\n  `;\r\n\r\n  hideHeader.addEventListener('mouseenter', () => {\r\n    hideHeader.style.backgroundColor = '#f7f9fa';\r\n  });\r\n\r\n  hideHeader.addEventListener('mouseleave', () => {\r\n    hideHeader.style.backgroundColor = 'white';\r\n  });\r\n\r\n  hideHeader.addEventListener('click', (e) => {\r\n    e.stopPropagation();\r\n    collapseAITweet(element);\r\n  });\r\n\r\n  element.insertBefore(hideHeader, element.firstChild);\r\n  element.removeAttribute('data-ai-collapsed');\r\n  element.removeAttribute('data-ai-original-content');\r\n}\r\n\r\nfunction expandFromStub(element: HTMLElement): void {\r\n  if (!element.hasAttribute('data-slop-collapsed')) {\r\n    return;\r\n  }\r\n\r\n  const originalContent = element.getAttribute('data-original-content');\r\n  if (originalContent) {\r\n    element.innerHTML = originalContent;\r\n  }\r\n\r\n  const existingHeaders = element.querySelectorAll('.slop-collapse-header');\r\n  existingHeaders.forEach(header => header.remove());\r\n\r\n  const collapseHeader = document.createElement('div');\r\n  collapseHeader.className = 'slop-collapse-header';\r\n  collapseHeader.innerHTML = `\r\n    <div class=\"slop-collapse-button\">\r\n      <span class=\"slop-collapse-text\">\uD83E\uDD16 Hide AI content</span>\r\n      <span class=\"slop-collapse-icon\">\u25B2</span>\r\n    </div>\r\n  `;\r\n\r\n  collapseHeader.addEventListener('mouseenter', () => {\r\n    collapseHeader.style.backgroundColor = 'rgb(239, 243, 244)';\r\n  });\r\n\r\n  collapseHeader.addEventListener('mouseleave', () => {\r\n    collapseHeader.style.backgroundColor = 'rgb(247, 249, 250)';\r\n  });\r\n\r\n  collapseHeader.addEventListener('click', (e) => {\r\n    e.stopPropagation();\r\n    collapseToStub(element);\r\n  });\r\n\r\n  element.insertBefore(collapseHeader, element.firstChild);\r\n  element.removeAttribute('data-slop-collapsed');\r\n  element.removeAttribute('data-original-content');\r\n}\r\n\r\nfunction applyTweetEffect(element: HTMLElement, effectType: 'blur' | 'hide' | 'collapse'): void {\r\n  hideAllExceptUsername(element);\r\n}\r\n\r\nfunction removeTweetEffect(element: HTMLElement): void {\r\n  restoreFromUsernameOnly(element);\r\n\r\n  element.classList.remove('slop-blurred', 'slop-hidden', 'slop-collapsed');\r\n\r\n  const collapseHeaders = element.querySelectorAll('.slop-collapse-header');\r\n  collapseHeaders.forEach(header => header.remove());\r\n\r\n  const hideAgainHeaders = element.querySelectorAll('.slop-hide-again-header');\r\n  hideAgainHeaders.forEach(header => header.remove());\r\n\r\n  element.classList.remove('slop-blurred', 'slop-hidden', 'slop-collapsed', 'slop-debug', 'slop-debug-detected', 'slop-debug-processed');\r\n\r\n  element.style.filter = '';\r\n  element.style.opacity = '';\r\n  element.style.pointerEvents = '';\r\n  element.style.userSelect = '';\r\n  element.style.border = '';\r\n  element.style.borderRadius = '';\r\n  element.style.outline = '';\r\n  element.style.backgroundColor = '';\r\n  element.style.display = '';\r\n\r\n  if (element.hasAttribute('data-slop-collapsed')) {\r\n    const originalContent = element.getAttribute('data-original-content');\r\n    if (originalContent) {\r\n      element.innerHTML = originalContent;\r\n      element.removeAttribute('data-original-content');\r\n    }\r\n    element.removeAttribute('data-slop-collapsed');\r\n  }\r\n\r\n  element.removeAttribute('data-slop-username-only');\r\n  element.removeAttribute('data-slop-original-content');\r\n}\r\n\r\nfunction addDebugHighlight(element: HTMLElement, detected: boolean): void {\r\n  if (!DEBUG) return;\r\n  \r\n  if (element.hasAttribute('data-slop-processed')) {\r\n    return;\r\n  }\r\n\r\n  if (detected) {\r\n    element.classList.add('slop-debug-detected');\r\n    debugLog('\uD83D\uDD34 SLOP DETECTED:', {\r\n      element,\r\n      text: element.textContent?.substring(0, 100)\r\n    });\r\n  } else {\r\n    element.classList.add('slop-debug-processed');\r\n    debugLog('\uD83D\uDFE2 Clean tweet processed:', {\r\n      element,\r\n      text: element.textContent?.substring(0, 50)\r\n    });\r\n  }\r\n\r\n  element.setAttribute('data-slop-processed', 'true');\r\n}\r\n\r\nfunction hideAllExceptUsername(element: HTMLElement): void {\r\n  if (element.hasAttribute('data-slop-username-only')) {\r\n    return;\r\n  }\r\n\r\n  const usernameInfo = extractUsernameInfo(element);\r\n  if (!usernameInfo.displayName && !usernameInfo.handle) {\r\n    debugLog('Could not extract username, falling back to collapse');\r\n    collapseToStub(element);\r\n    return;\r\n  }\r\n\r\n  const existingHeaders = element.querySelectorAll('.slop-hide-again-header');\r\n  existingHeaders.forEach(header => header.remove());\r\n\r\n  const originalContent = element.innerHTML;\r\n  element.setAttribute('data-slop-original-content', originalContent);\r\n\r\n  const usernameContainer = document.createElement('div');\r\n  usernameContainer.className = 'slop-username-display';\r\n  usernameContainer.style.cssText = `\r\n    background: rgb(247, 249, 250);\r\n    border: 1px solid rgb(207, 217, 222);\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n    margin: 2px 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n  `;\r\n\r\n  usernameContainer.innerHTML = `\r\n    <div style=\"display: flex; flex-direction: column; gap: 8px;\">\r\n      <div style=\"display: flex; align-items: center; gap: 8px;\">\r\n        <span style=\"font-weight: 700; color: rgb(15, 20, 25); font-size: 15px;\">${usernameInfo.displayName || 'User'}</span>\r\n        ${usernameInfo.handle ? `<span style=\"color: rgb(83, 100, 113); font-size: 15px;\">@${usernameInfo.handle}</span>` : ''}\r\n      </div>\r\n      <div style=\"color: rgb(83, 100, 113); font-size: 15px; margin: 4px 0;\">\r\n        Content hidden by Slop Block\r\n      </div>\r\n      <button class=\"slop-show-content\" style=\"\r\n        background: rgb(29, 161, 242);\r\n        color: white;\r\n        border: none;\r\n        border-radius: 20px;\r\n        padding: 8px 16px;\r\n        font-size: 14px;\r\n        font-weight: 700;\r\n        cursor: pointer;\r\n        transition: background-color 0.2s ease;\r\n        align-self: flex-start;\r\n      \">Show</button>\r\n    </div>\r\n  `;\r\n\r\n  usernameContainer.addEventListener('mouseenter', () => {\r\n    usernameContainer.style.backgroundColor = 'rgb(239, 243, 244)';\r\n  });\r\n\r\n  usernameContainer.addEventListener('mouseleave', () => {\r\n    usernameContainer.style.backgroundColor = 'rgb(247, 249, 250)';\r\n  });\r\n\r\n  const showButton = usernameContainer.querySelector('.slop-show-content') as HTMLButtonElement;\r\n  showButton?.addEventListener('click', (e) => {\r\n    e.stopPropagation();\r\n    restoreFromUsernameOnly(element);\r\n  });\r\n\r\n  element.innerHTML = '';\r\n  element.appendChild(usernameContainer);\r\n  element.setAttribute('data-slop-username-only', 'true');\r\n  element.style.display = 'block';\r\n}\r\n\r\nfunction extractUsernameInfo(element: HTMLElement): { displayName: string | null, handle: string | null } {\r\n  const userNameElement = element.querySelector('[data-testid=\"User-Name\"]');\r\n  \r\n  let displayName: string | null = null;\r\n  let handle: string | null = null;\r\n\r\n  if (userNameElement) {\r\n    const nameSpans = userNameElement.querySelectorAll('span');\r\n    for (const span of Array.from(nameSpans)) {\r\n      const text = span.textContent?.trim();\r\n      if (text) {\r\n        if (text.startsWith('@')) {\r\n          handle = text.substring(1);\r\n        } else if (!displayName && !text.includes('@')) {\r\n          displayName = text;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { displayName, handle };\r\n}\r\n\r\nfunction restoreFromUsernameOnly(element: HTMLElement): void {\r\n  if (!element.hasAttribute('data-slop-username-only')) {\r\n    return;\r\n  }\r\n\r\n  const originalContent = element.getAttribute('data-slop-original-content');\r\n  if (originalContent) {\r\n    element.innerHTML = originalContent;\r\n  }\r\n\r\n  const existingHeaders = element.querySelectorAll('.slop-hide-again-header');\r\n  existingHeaders.forEach(header => header.remove());\r\n\r\n  const hideAgainHeader = document.createElement('div');\r\n  hideAgainHeader.className = 'slop-hide-again-header';\r\n  hideAgainHeader.style.cssText = `\r\n    background: rgb(247, 249, 250);\r\n    border: 1px solid rgb(207, 217, 222);\r\n    border-radius: 12px;\r\n    padding: 8px 12px;\r\n    margin-bottom: 8px;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease;\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n  `;\r\n\r\n  hideAgainHeader.innerHTML = `\r\n    <div style=\"display: flex; align-items: center; justify-content: space-between; width: 100%;\">\r\n      <span style=\"color: rgb(83, 100, 113); font-size: 13px; font-weight: 400;\">\uD83E\uDD16 Hide AI content again</span>\r\n      <span style=\"color: rgb(83, 100, 113); font-size: 12px; margin-left: 8px; transition: transform 0.2s ease;\">\u25B2</span>\r\n    </div>\r\n  `;\r\n\r\n  hideAgainHeader.addEventListener('mouseenter', () => {\r\n    hideAgainHeader.style.backgroundColor = 'rgb(239, 243, 244)';\r\n  });\r\n\r\n  hideAgainHeader.addEventListener('mouseleave', () => {\r\n    hideAgainHeader.style.backgroundColor = 'rgb(247, 249, 250)';\r\n  });\r\n\r\n  hideAgainHeader.addEventListener('click', (e) => {\r\n    e.stopPropagation();\r\n    hideAllExceptUsername(element);\r\n  });\r\n\r\n  element.insertBefore(hideAgainHeader, element.firstChild);\r\n  element.removeAttribute('data-slop-username-only');\r\n  element.removeAttribute('data-slop-original-content');\r\n}\r\n\r\nexport { \r\n  getTweetElements, \r\n  extractTweetData, \r\n  applyTweetEffect, \r\n  removeTweetEffect, \r\n  addDebugHighlight,\r\n  hideAllExceptUsername,\r\n  restoreFromUsernameOnly,\r\n  collapseAITweet,\r\n  expandAITweet,\r\n  type TweetMetadata \r\n}; ", "import { getStorageValue, STORAGE_KEYS, DEFAULT_VALUES } from './storage';\r\n\r\n\r\nconst OPENROUTER_ENDPOINT = 'https://openrouter.ai/api/v1/chat/completions';\r\n\r\nexport interface LLMAnalysisResult {\r\n  id: number;\r\n  isSlop: boolean;\r\n  confidence: number;   \r\n}\r\n\r\nexport async function analyzeTweetsWithLLM(\r\n  tweets: string[],\r\n  useGroq: boolean = true\r\n): Promise<LLMAnalysisResult[] | null> {\r\n  if (tweets.length === 0) return [];\r\n  \r\n  const apiKey = await getStorageValue(\r\n    STORAGE_KEYS.OPENROUTER_API_KEY,\r\n    DEFAULT_VALUES[STORAGE_KEYS.OPENROUTER_API_KEY]\r\n  );\r\n  \r\n  if (!apiKey) {\r\n    console.warn('[OpenRouter] No API key set \u2013 skipping remote analysis');\r\n    return null;\r\n  }\r\n\r\n  const prompt = await getStorageValue(\r\n    STORAGE_KEYS.SYSTEM_PROMPT,\r\n    DEFAULT_VALUES[STORAGE_KEYS.SYSTEM_PROMPT]\r\n  );\r\n\r\n  const userContent = `Analyze these ${tweets.length} tweets and identify which are AI-generated motivational slop, engagement bait, or generic inspirational content. Return JSON with format: {\"results\": [{\"id\": 0, \"isSlop\": true/false, \"confidence\": 0.0-1.0}]}\r\n\r\nTweets:\r\n${tweets.map((tweet, i) => `${i}: ${tweet}`).join('\\n\\n')}`;\r\n\r\n  const messages = [\r\n    {\r\n      role: 'system',\r\n      content: prompt\r\n    },\r\n    {\r\n      role: 'user',\r\n      content: userContent\r\n    }\r\n  ];\r\n\r\n  const body: Record<string, unknown> = {\r\n    model: 'meta-llama/llama-4-maverick',\r\n    temperature: 0.1,\r\n    max_tokens: 1000,\r\n    messages,\r\n    response_format: { type: 'json_object' }\r\n  };\r\n\r\n  if (useGroq) {\r\n    body.provider = { order: ['groq'] };\r\n  }\r\n\r\n  try {\r\n    console.log('[OpenRouter] Sending request with', tweets.length, 'tweets');\r\n    \r\n    const res = await fetch(OPENROUTER_ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'Content-Type': 'application/json',\r\n        'HTTP-Referer': window.location.origin,\r\n        'X-Title': 'SlopBlock Extension'\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    if (!res.ok) {\r\n      const errorText = await res.text();\r\n      console.error('[OpenRouter] HTTP error', res.status, errorText);\r\n      return null;\r\n    }\r\n\r\n    const responseText = await res.text();\r\n    console.log('[OpenRouter] Full response text:', responseText);\r\n    \r\n    if (!responseText.trim()) {\r\n      console.error('[OpenRouter] Empty response from API');\r\n      return null;\r\n    }\r\n\r\n    let data;\r\n    try {\r\n      data = JSON.parse(responseText);\r\n    } catch (parseError) {\r\n      console.error('[OpenRouter] Failed to parse response JSON:', parseError);\r\n      console.error('[OpenRouter] Response was:', responseText);\r\n      return null;\r\n    }\r\n\r\n    const raw = data?.choices?.[0]?.message?.content;\r\n    if (!raw) {\r\n      console.error('[OpenRouter] No content in response data:', data);\r\n      return null;\r\n    }\r\n\r\n    console.log('[OpenRouter] AI response content:', raw);\r\n    \r\n    let parsed;\r\n    try {\r\n      parsed = JSON.parse(raw);\r\n    } catch (contentParseError) {\r\n      console.error('[OpenRouter] Failed to parse AI response JSON:', contentParseError);\r\n      console.error('[OpenRouter] AI content was:', raw);\r\n      return null;\r\n    }\r\n    \r\n    console.log('[OpenRouter] Parsed results:', parsed);\r\n    return parsed.results || parsed;\r\n  } catch (err) {\r\n    console.error('[OpenRouter] Network/parse error', err);\r\n    return null;\r\n  }\r\n} ", "console.log('\uD83D\uDD0D SlopBlock: Script loaded at', new Date().toISOString());\r\nconsole.log('\uD83D\uDD0D SlopBlock: URL:', window.location.href);\r\nconsole.log('\uD83D\uDD0D SlopBlock: Document ready state:', document.readyState);\r\n\r\nimport { getLocalStorageValue, setLocalStorageValue, getStorageValue, STORAGE_KEYS } from '../utils/storage';\r\nimport { getTweetElements, extractTweetData, collapseAITweet } from '../utils/dom';\r\nimport { analyzeTweetsWithLLM } from '../utils/openrouter';\r\n\r\ntype TweetInfo = { id: string; text: string; element: HTMLElement };\r\n\r\nconst MAX_TWEETS = 200;\r\nconst DROP_COUNT = 10;\r\nconst BATCH_SIZE = 15;\r\n\r\nlet processed: string[] = [];\r\nlet queue: TweetInfo[] = [];\r\nconst elementMap = new Map<string, HTMLElement>();\r\nlet isEnabled = false;\r\nlet observer: MutationObserver | null = null;\r\n\r\nasync function loadProcessed() {\r\n  processed = await getLocalStorageValue<string[]>(STORAGE_KEYS.PROCESSED_TWEET_IDS, []);\r\n}\r\n\r\nasync function saveProcessed() {\r\n  await setLocalStorageValue(STORAGE_KEYS.PROCESSED_TWEET_IDS, processed);\r\n}\r\n\r\nfunction addProcessed(id: string) {\r\n  processed.push(id);\r\n  if (processed.length > MAX_TWEETS) processed.splice(0, DROP_COUNT);\r\n  \r\n  if (chrome?.runtime?.id) {\r\n    saveProcessed();\r\n  }\r\n}\r\n\r\nasync function analyseBatch(batch: TweetInfo[]): Promise<Set<string>> {\r\n  const texts = batch.map(t => t.text);\r\n  console.log('[Batch] Analyzing', batch.length, 'tweets with OpenRouter...');\r\n  console.log('[Batch] Tweet texts being sent:', texts);\r\n  \r\n  try {\r\n    const useGroq = await getStorageValue(STORAGE_KEYS.USE_GROQ, true);\r\n    console.log('[Batch] Using Groq:', useGroq);\r\n    \r\n    const results = await analyzeTweetsWithLLM(texts, useGroq);\r\n    console.log('[Batch] OpenRouter returned:', results);\r\n    \r\n    if (!results) {\r\n      console.log('[Batch] No API key or analysis failed');\r\n      return new Set<string>();\r\n    }\r\n    \r\n    const flaggedIds = new Set<string>();\r\n    results.forEach((result, index) => {\r\n      console.log('[Batch] Processing result', index, ':', result);\r\n      if (result.isSlop && index < batch.length) {\r\n        const tweetId = batch[index].id;\r\n        flaggedIds.add(tweetId);\r\n        console.log('[Flagged]', tweetId, 'confidence:', result.confidence, 'text:', batch[index].text.substring(0, 100));\r\n      } else {\r\n        console.log('[Clean]', batch[index]?.id, 'text:', batch[index]?.text.substring(0, 100));\r\n      }\r\n    });\r\n    \r\n    console.log('[Batch] Final result: Flagged', flaggedIds.size, 'out of', batch.length, 'tweets');\r\n    console.log('[Batch] Flagged IDs:', Array.from(flaggedIds));\r\n    return flaggedIds;\r\n    \r\n  } catch (error) {\r\n    console.error('[Batch] Analysis error:', error);\r\n    return new Set<string>();\r\n  }\r\n}\r\n\r\nfunction handleFlags(flags: Set<string>) {\r\n  flags.forEach(id => {\r\n    const el = elementMap.get(id);\r\n    if (el) {\r\n      collapseAITweet(el);\r\n      console.log('[Collapsed AI Tweet]', id);\r\n    }\r\n  });\r\n}\r\n\r\nasync function flushQueue() {\r\n  if (queue.length < BATCH_SIZE) return;\r\n  const batch = queue.splice(0, BATCH_SIZE);\r\n  const flagged = await analyseBatch(batch);\r\n  handleFlags(flagged);\r\n}\r\n\r\nfunction processTweet(el: HTMLElement) {\r\n  if (!isEnabled) return;\r\n  \r\n  const data = extractTweetData(el);\r\n  if (!data) return;\r\n  const { id, text } = data;\r\n  if (!id || processed.includes(id)) return;\r\n\r\n  console.log('[Tweet]', id, text.substring(0, 120));\r\n\r\n  addProcessed(id);\r\n  queue.push({ id, text, element: el });\r\n  elementMap.set(id, el);\r\n  flushQueue();\r\n}\r\n\r\nfunction initialScan() {\r\n  if (!isEnabled) return;\r\n  getTweetElements().forEach(el => processTweet(el as HTMLElement));\r\n}\r\n\r\nfunction startObserver() {\r\n  if (observer) return;\r\n  \r\n  observer = new MutationObserver(muts => {\r\n    if (!isEnabled) return;\r\n    \r\n    muts.forEach(m => {\r\n      m.addedNodes.forEach(node => {\r\n        if (node.nodeType === Node.ELEMENT_NODE) {\r\n          const el = node as HTMLElement;\r\n          if (el.matches('[data-testid=\"tweet\"]')) {\r\n            processTweet(el);\r\n          } else {\r\n            el.querySelectorAll?.('[data-testid=\"tweet\"]').forEach(t => processTweet(t as HTMLElement));\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n  \r\n  observer.observe(document.body, { childList: true, subtree: true });\r\n}\r\n\r\nfunction stopObserver() {\r\n  if (observer) {\r\n    observer.disconnect();\r\n    observer = null;\r\n  }\r\n}\r\n\r\nasync function updateExtensionState() {\r\n  const enabled = await getStorageValue(STORAGE_KEYS.SLOP_BLOCK_ENABLED, false);\r\n  console.log('[Extension] State changed to:', enabled ? 'ENABLED' : 'DISABLED');\r\n  \r\n  if (enabled && !isEnabled) {\r\n    isEnabled = true;\r\n    startObserver();\r\n    initialScan();\r\n  } else if (!enabled && isEnabled) {\r\n    isEnabled = false;\r\n    stopObserver();\r\n    queue.length = 0;\r\n  }\r\n}\r\n\r\nchrome.runtime.onMessage.addListener((message) => {\r\n  if (message.action === 'stateChanged') {\r\n    updateExtensionState();\r\n  }\r\n});\r\n\r\n(async () => {\r\n  await loadProcessed();\r\n  await updateExtensionState();\r\n})();"],
  "mappings": "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",
  "names": ["_a", "node"]
}
