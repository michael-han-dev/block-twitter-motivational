{
  "version": 3,
  "sources": ["../src/utils/storage.ts", "../src/background/background.ts"],
  "sourcesContent": ["export async function getStorageValue<T>(key: string, defaultValue: T): Promise<T> {\r\n  try {\r\n    const result = await chrome.storage.sync.get({ [key]: defaultValue });\r\n    return result[key];\r\n  } catch (error) {\r\n    console.error(`Failed to get storage value for key ${key}:`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\nexport async function setStorageValue<T>(key: string, value: T): Promise<void> {\r\n  try {\r\n    await chrome.storage.sync.set({ [key]: value });\r\n  } catch (error) {\r\n    console.error(`Failed to set storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport async function removeStorageValue(key: string): Promise<void> {\r\n  try {\r\n    await chrome.storage.sync.remove(key);\r\n  } catch (error) {\r\n    console.error(`Failed to remove storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport async function getLocalStorageValue<T>(key: string, defaultValue: T): Promise<T> {\r\n  try {\r\n    const result = await chrome.storage.local.get({ [key]: defaultValue });\r\n    return result[key];\r\n  } catch (error) {\r\n    console.error(`Failed to get local storage value for key ${key}:`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\nexport async function setLocalStorageValue<T>(key: string, value: T): Promise<void> {\r\n  try {\r\n    await chrome.storage.local.set({ [key]: value });\r\n  } catch (error) {\r\n    if (error instanceof Error && error.message.includes('Extension context invalidated')) {\r\n      console.warn(`Extension context invalidated - skipping storage save for ${key}`);\r\n      return;\r\n    }\r\n    console.error(`Failed to set local storage value for key ${key}:`, error);\r\n  }\r\n}\r\n\r\nexport const STORAGE_KEYS = {\r\n  SLOP_BLOCK_ENABLED: 'slopBlockEnabled',\r\n  DETECTION_COUNT: 'detectionCount',\r\n  USER_WHITELIST: 'userWhitelist',\r\n  BLUR_MODE: 'blurMode',\r\n  OPENROUTER_API_KEY: 'openRouterApiKey',\r\n  AI_DETECTION_ENABLED: 'aiDetectionEnabled',\r\n  USE_GROQ: 'useGroq',\r\n  SYSTEM_PROMPT: 'systemPrompt',\r\n  BATCH_SIZE: 'batchSize',\r\n  CUSTOM_PROMPT: 'customPrompt',\r\n  PROCESSED_TWEET_IDS: 'processedTweetIds',\r\n  LLM_ANALYZED_IDS: 'llmAnalyzedIds',\r\n} as const;\r\n\r\nexport const DEFAULT_VALUES = {\r\n  [STORAGE_KEYS.SLOP_BLOCK_ENABLED]: false,\r\n  [STORAGE_KEYS.DETECTION_COUNT]: 0,\r\n  [STORAGE_KEYS.USER_WHITELIST]: [] as string[],\r\n  [STORAGE_KEYS.BLUR_MODE]: true,\r\n  [STORAGE_KEYS.OPENROUTER_API_KEY]: '',\r\n  [STORAGE_KEYS.AI_DETECTION_ENABLED]: false,\r\n  [STORAGE_KEYS.USE_GROQ]: true,\r\n  [STORAGE_KEYS.SYSTEM_PROMPT]: 'You are an expert at detecting AI-generated motivational slop, engagement bait, and generic inspirational content on social media. Analyze each tweet and classify it as slop or genuine content.\\n\\nSLOP INDICATORS:\\n\u2022 Motivational clich\u00E9s: \"mindset is everything\", \"follow your dreams\", \"hustle harder\", \"grind never stops\"\\n\u2022 Business/money schemes: \"$10k/month\", \"passive income\", \"quit my job\", \"financial freedom\"\\n\u2022 Generic advice patterns: \"here\\'s what I learned\", \"X things nobody tells you\", \"stop doing this, start doing this\"\\n\u2022 Engagement bait: \"unpopular opinion\", \"let that sink in\", \"read that again\", \"thread \uD83E\uDDF5\"\\n\u2022 AI-like structure: numbered lists, formulaic advice, excessive emojis\\n\u2022 Buzzwords: entrepreneur, transformation, breakthrough, optimize, unlock potential\\n\u2022 Sales pitches: \"DM me\", \"link in bio\", \"limited time\", \"exclusive access\"\\n\\nReturn JSON format: {\"results\": [{\"id\": 0, \"isSlop\": true/false, \"confidence\": 0.0-1.0}]} where id matches tweet position (0-14).',\r\n  [STORAGE_KEYS.BATCH_SIZE]: 10,\r\n  [STORAGE_KEYS.CUSTOM_PROMPT]: '',\r\n  [STORAGE_KEYS.PROCESSED_TWEET_IDS]: [] as string[],\r\n  [STORAGE_KEYS.LLM_ANALYZED_IDS]: [] as string[],\r\n} as const;\r\n\r\n\r\nexport interface TweetMetadata {\r\n  id: string;\r\n  text: string;\r\n  username: string;\r\n  engagement: {\r\n    likes: number;\r\n    retweets: number;\r\n    replies: number;\r\n  };\r\n  element: HTMLElement;\r\n  timestamp: number;\r\n} \r\n", "import { getStorageValue, setStorageValue, STORAGE_KEYS, DEFAULT_VALUES } from '../utils/storage';\r\n\r\n\r\n\r\nconst ICONS = {\r\n  ENABLED: {\r\n    16: 'icons/icon16.png',\r\n    32: 'icons/icon32.png',\r\n    48: 'icons/icon32.png',\r\n    128: 'icons/icon128.png'\r\n  },\r\n  DISABLED: {\r\n    16: 'icons/icon16-disabled.png',\r\n    32: 'icons/icon32-disabled.png',\r\n    48: 'icons/icon32-disabled.png', \r\n    128: 'icons/icon128-disabled.png'\r\n  }\r\n};\r\n\r\nchrome.runtime.onInstalled.addListener(async (details) => {\r\n  console.log('Slop Block extension installed/updated:', details.reason);\r\n  \r\n  if (details.reason === 'install') {\r\n    await setStorageValue(STORAGE_KEYS.SLOP_BLOCK_ENABLED, DEFAULT_VALUES[STORAGE_KEYS.SLOP_BLOCK_ENABLED]);\r\n    await setStorageValue(STORAGE_KEYS.BLUR_MODE, DEFAULT_VALUES[STORAGE_KEYS.BLUR_MODE]);\r\n    await setStorageValue(STORAGE_KEYS.DETECTION_COUNT, DEFAULT_VALUES[STORAGE_KEYS.DETECTION_COUNT]);\r\n    await setStorageValue(STORAGE_KEYS.USER_WHITELIST, DEFAULT_VALUES[STORAGE_KEYS.USER_WHITELIST]);\r\n  }\r\n  \r\n  const isEnabled = await getStorageValue(STORAGE_KEYS.SLOP_BLOCK_ENABLED, DEFAULT_VALUES[STORAGE_KEYS.SLOP_BLOCK_ENABLED]);\r\n  await updateIcon(isEnabled);\r\n});\r\n\r\nchrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\r\n  console.log('\uD83D\uDCE8 Background received message:', message);\r\n  \r\n  try {\r\n    switch (message.action) {        \r\n      case 'stateChanged':\r\n        console.log('\uD83D\uDD04 Processing state change:', message.enabled);\r\n        await updateIcon(message.enabled);\r\n        console.log('\u2705 Icon updated for state change');\r\n        sendResponse({ success: true });\r\n        break;\r\n        \r\n      case 'updateCount':\r\n        console.log('\uD83D\uDCCA Processing count update:', message.count);\r\n        const currentCount = await getStorageValue(STORAGE_KEYS.DETECTION_COUNT, DEFAULT_VALUES[STORAGE_KEYS.DETECTION_COUNT]);\r\n        const newCount = currentCount + (message.count || 1);\r\n        await setStorageValue(STORAGE_KEYS.DETECTION_COUNT, newCount);\r\n        console.log('\uD83D\uDCC8 Count updated:', currentCount, '\u2192', newCount);\r\n        \r\n        if (sender.tab?.id) {\r\n          console.log('\uD83C\uDFF7\uFE0F Updating badge for tab:', sender.tab.id);\r\n          await updateBadge(true, sender.tab.id, newCount);\r\n        }\r\n        sendResponse({ success: true });\r\n        break;\r\n        \r\n      default:\r\n        console.warn('\u26A0\uFE0F Unknown message action:', message.action);\r\n        sendResponse({ error: 'Unknown action' });\r\n    }\r\n  } catch (error) {\r\n    console.error('\u274C Error handling message:', error);\r\n    sendResponse({ error: error instanceof Error ? error.message : 'Unknown error' });\r\n  }\r\n  \r\n  return true;\r\n});\r\n\r\nasync function updateIcon(enabled: boolean): Promise<void> {\r\n  try {\r\n    console.log('\uD83C\uDFAF Updating icon for enabled state:', enabled);\r\n    const title = enabled ? 'Slop Block: ON (click to disable)' : 'Slop Block: OFF (click to enable)';\r\n    await chrome.action.setTitle({ title });\r\n    console.log('\uD83D\uDCDD Title updated:', title);\r\n    \r\n    const tabs = await chrome.tabs.query({});\r\n    const twitterTabs = tabs.filter(tab => isTwitterTab(tab.url));\r\n    console.log('\uD83D\uDC26 Found Twitter tabs:', twitterTabs.length);\r\n    \r\n    for (const tab of twitterTabs) {\r\n      if (tab.id) {\r\n        console.log('\uD83C\uDFF7\uFE0F Updating badge for Twitter tab:', tab.id, tab.url);\r\n        await updateBadge(enabled, tab.id);\r\n      }\r\n    }\r\n    \r\n    console.log(`\u2705 Icon updated: ${enabled ? 'enabled' : 'disabled'}`);\r\n  } catch (error) {\r\n    console.error('\u274C Failed to update icon:', error);\r\n  }\r\n}\r\n\r\nasync function updateBadge(enabled: boolean, tabId?: number, count?: number): Promise<void> {\r\n  try {\r\n    console.log('\uD83C\uDFF7\uFE0F Updating badge:', { enabled, tabId, count });\r\n    \r\n    if (!enabled) {\r\n      console.log('\uD83D\uDEAB Extension disabled - clearing badge');\r\n      await chrome.action.setBadgeText({ text: '', tabId });\r\n      return;\r\n    }\r\n    \r\n    if (count !== undefined && count > 0) {\r\n      const badgeText = count > 99 ? '99+' : count.toString();\r\n      console.log('\uD83D\uDD22 Setting count badge:', badgeText);\r\n      await chrome.action.setBadgeText({ text: badgeText, tabId });\r\n      await chrome.action.setBadgeBackgroundColor({ color: '#ff4444', tabId });\r\n    } else {\r\n      console.log('\u2705 Setting ON badge');\r\n      await chrome.action.setBadgeText({ text: 'ON', tabId });\r\n      await chrome.action.setBadgeBackgroundColor({ color: '#00aa00', tabId });\r\n    }\r\n    console.log('\u2705 Badge update completed');\r\n  } catch (error) {\r\n    console.error('\u274C Failed to update badge:', error);\r\n  }\r\n}\r\n\r\nfunction isTwitterTab(url?: string): boolean {\r\n  if (!url) return false;\r\n  return url.includes('twitter.com') || url.includes('x.com');\r\n}\r\n\r\nchrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {\r\n  if (changeInfo.status === 'complete' && isTwitterTab(tab.url)) {\r\n    const isEnabled = await getStorageValue(STORAGE_KEYS.SLOP_BLOCK_ENABLED, DEFAULT_VALUES[STORAGE_KEYS.SLOP_BLOCK_ENABLED]);\r\n    await updateBadge(isEnabled, tabId);\r\n  }\r\n});\r\n\r\nconsole.log('Slop Block background service worker loaded'); "],
  "mappings": "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",
  "names": []
}
